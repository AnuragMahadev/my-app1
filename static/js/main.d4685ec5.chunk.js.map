{"version":3,"sources":["components/Count.js","components/Button.js","components/Title.js","components/ParentComponent.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","_ref","text","count","console","log","concat","react_default","a","createElement","handleClick","children","onClick","ParentComponent","_useState","useState","_useState2","Object","slicedToArray","age","setAge","_useState3","_useState4","salary","setSalary","incrementAge","useCallback","incrementSalary","components_Title","components_Count","components_Button","App","className","components_ParentComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kOAOeA,UAAMC,KALrB,SAAAC,GAAgC,IAAfC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,MAEtB,OADAC,QAAQC,IAAR,aAAAC,OAAyBJ,IAClBK,EAAAC,EAAAC,cAAA,WAAMP,EAAN,MAAeC,KCORJ,UAAMC,KATrB,SAAAC,GAA2C,IAAzBS,EAAyBT,EAAzBS,YAAaC,EAAYV,EAAZU,SAE7B,OADAP,QAAQC,IAAI,sBAAuBM,GAEjCJ,EAAAC,EAAAC,cAAA,UAAQG,QAASF,GACdC,KCKQZ,UAAMC,KATrB,WAEE,OADAI,QAAQC,IAAI,mBAEVE,EAAAC,EAAAC,cAAA,gCCuBWI,MAvBf,WACC,IAAAC,EAAsBC,mBAAS,IAA/BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAOK,EAAPH,EAAA,GAAYI,EAAZJ,EAAA,GACAK,EAA4BN,mBAAS,KAArCO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAAOE,EAAPD,EAAA,GAAeE,EAAfF,EAAA,GAEMG,EAAeC,sBAAY,WAChCN,EAAOD,EAAM,IACX,CAACA,IAEEQ,EAAkBD,sBAAY,WACnCF,EAAUD,EAAS,MACjB,CAACA,IAEJ,OACChB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACoB,EAAD,CAAO3B,KAAK,MAAMC,MAAOgB,IACzBZ,EAAAC,EAAAC,cAACqB,EAAD,CAAQpB,YAAae,GAArB,iBACAlB,EAAAC,EAAAC,cAACoB,EAAD,CAAO3B,KAAK,SAASC,MAAOoB,IAC5BhB,EAAAC,EAAAC,cAACqB,EAAD,CAAQpB,YAAaiB,GAArB,sBCXYI,MARf,WACC,OACCxB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,OACdzB,EAAAC,EAAAC,cAACwB,EAAD,QCKiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d4685ec5.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Count({ text, count }) {\n\tconsole.log(`Rendering ${text}`)\n\treturn <div>{text} - {count}</div>\n}\n\nexport default React.memo(Count)\n","import React from 'react'\n\nfunction Button({ handleClick, children }) {\n  console.log('Rendering button - ', children)\n  return (\n    <button onClick={handleClick}>\n      {children}\n    </button>\n  )\n}\n\nexport default React.memo(Button)\n","import React from 'react'\n\nfunction Title() {\n  console.log('Rendering Title')\n  return (\n    <h2>\n      useCallback Hook\n    </h2>\n  )\n}\n\nexport default React.memo(Title)\n","import React, { useState, useCallback } from 'react'\nimport Count from './Count'\nimport Button from './Button'\nimport Title from './Title'\n\nfunction ParentComponent() {\n\tconst [age, setAge] = useState(25)\n\tconst [salary, setSalary] = useState(50000)\n\n\tconst incrementAge = useCallback(() => {\n\t\tsetAge(age + 1)\n\t}, [age])\n\n\tconst incrementSalary = useCallback(() => {\n\t\tsetSalary(salary + 1000)\n\t}, [salary])\n\n\treturn (\n\t\t<div>\n\t\t\t<Title />\n\t\t\t<Count text=\"Age\" count={age} />\n\t\t\t<Button handleClick={incrementAge}>Increment Age</Button>\n\t\t\t<Count text=\"Salary\" count={salary} />\n\t\t\t<Button handleClick={incrementSalary}>Increment Salary</Button>\n\t\t</div>\n\t)\n}\n\nexport default ParentComponent\n","import React from 'react'\nimport './App.css'\nimport ParentComponent from './components/ParentComponent'\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ParentComponent />\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}